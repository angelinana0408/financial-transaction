// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "nhmwiop.h"

/////////////////////////////////////////////////////////////////////////////
// CNHMwiOp

IMPLEMENT_DYNCREATE(CNHMwiOp, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CNHMwiOp properties

/////////////////////////////////////////////////////////////////////////////
// CNHMwiOp operations

void CNHMwiOp::ProcSetDeviceEvent(LPCTSTR szDeviceName, LPCTSTR szEventName, LPCTSTR szEventValue)
{
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 szDeviceName, szEventName, szEventValue);
}

void CNHMwiOp::ProcSetDeviceStatus(LPCTSTR szDeviceName, LPCTSTR szProperty, LPCTSTR szStatus)
{
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 szDeviceName, szProperty, szStatus);
}

long CNHMwiOp::TtuInitialize()
{
	long result;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CNHMwiOp::TtuDeinitialize()
{
	long result;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

CString CNHMwiOp::TtuGetErrorCode()
{
	CString result;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

long CNHMwiOp::TtuClearErrorCode()
{
	long result;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CNHMwiOp::TtuGetDeviceStatus()
{
	long result;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CNHMwiOp::TtuClearScreenSync()
{
	long result;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CNHMwiOp::TtuSetLEDSync(long LEDNumber, LPCTSTR State)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		LEDNumber, State);
	return result;
}

long CNHMwiOp::TtuReadAt(long x, long y, long NumberOpChars, LPCTSTR EchoMode, LPCTSTR EchoFormat, LPCTSTR InputType, long CursorOn, long Flush, long AutoEnd, long Timeout)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_BSTR VTS_BSTR VTS_BSTR VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		x, y, NumberOpChars, EchoMode, EchoFormat, InputType, CursorOn, Flush, AutoEnd, Timeout);
	return result;
}

long CNHMwiOp::TtuWriteAtSync(long x, long y, LPCTSTR Format, LPCTSTR Text)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BSTR VTS_BSTR;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		x, y, Format, Text);
	return result;
}

CString CNHMwiOp::TtuGetReadData()
{
	CString result;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

CString CNHMwiOp::CheckDeviceAction(long nDevID, long nWaitSec)
{
	CString result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0xd, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		nDevID, nWaitSec);
	return result;
}

long CNHMwiOp::ScanDeviceAction(long nDevID, long nWaitSec, long nEventKind)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0xe, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nDevID, nWaitSec, nEventKind);
	return result;
}

long CNHMwiOp::TtuClearAreaSync(long x, long y, long Width, long Hight)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0xf, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		x, y, Width, Hight);
	return result;
}

long CNHMwiOp::TtuCancelRead()
{
	long result;
	InvokeHelper(0x10, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

CString CNHMwiOp::TestMethod(LPCTSTR szParam1, LPCTSTR szParam2, LPCTSTR szParam3)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR;
	InvokeHelper(0x11, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		szParam1, szParam2, szParam3);
	return result;
}

long CNHMwiOp::ClearEventDevice(long nDevID)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x12, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nDevID);
	return result;
}

long CNHMwiOp::ClearStatusDevice(long nDevID)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x13, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nDevID);
	return result;
}

long CNHMwiOp::GetErrorDevice(long nDevID)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x14, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nDevID);
	return result;
}

long CNHMwiOp::GetTimeoutDevice(long nDevID)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x15, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nDevID);
	return result;
}

long CNHMwiOp::GetEventDevice(long nDevID)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x16, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nDevID);
	return result;
}

long CNHMwiOp::GetStatusDevice(long nDevID)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x17, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nDevID);
	return result;
}

long CNHMwiOp::ScrInitialize()
{
	long result;
	InvokeHelper(0x18, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CNHMwiOp::ScrClearKeyData()
{
	long result;
	InvokeHelper(0x19, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

CString CNHMwiOp::ScrGetKeyString(long nWaitSec)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1a, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		nWaitSec);
	return result;
}

CString CNHMwiOp::ScrGetKeyData(long nWaitSec)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1b, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		nWaitSec);
	return result;
}

long CNHMwiOp::ScrSetData(LPCTSTR szDataName, LPCTSTR szDataValue)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x1c, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		szDataName, szDataValue);
	return result;
}

CString CNHMwiOp::ScrGetScreenData(long nWaitSec)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		nWaitSec);
	return result;
}

long CNHMwiOp::ScrSetScreenData(LPCTSTR szDataName, LPCTSTR szDataValue)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x1e, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		szDataName, szDataValue);
	return result;
}

long CNHMwiOp::ScrSetDisplayData(LPCTSTR szDataName, LPCTSTR szDataValue)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x1f, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		szDataName, szDataValue);
	return result;
}

long CNHMwiOp::ScrDisplayScreen(LPCTSTR szTag, long nIndex, LPCTSTR szData)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4 VTS_BSTR;
	InvokeHelper(0x20, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		szTag, nIndex, szData);
	return result;
}

long CNHMwiOp::TtuReadAtEx(long x, long y, long NumberOfChars, LPCTSTR EchoMode, LPCTSTR EchoFormat, LPCTSTR InputType, long CursorOn, long Flush, long AutoEnd, long Timeout, LPCTSTR ActiveKeys, LPCTSTR ActiveCmdKeys, LPCTSTR TerminateCmdKeys)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_BSTR VTS_BSTR VTS_BSTR VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_BSTR VTS_BSTR VTS_BSTR;
	InvokeHelper(0x21, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		x, y, NumberOfChars, EchoMode, EchoFormat, InputType, CursorOn, Flush, AutoEnd, Timeout, ActiveKeys, ActiveCmdKeys, TerminateCmdKeys);
	return result;
}

void CNHMwiOp::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
